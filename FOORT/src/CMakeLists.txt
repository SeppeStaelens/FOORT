set(HEADER_FILES Geometry.h Header.h Spline.h)

add_executable(foort Main.cpp ${HEADER_FILES})

# ClangFormat(play_simple .)

add_library(config_lib STATIC Config.cpp Config.h)
add_library(config_reader_lib STATIC ConfigReader.cpp ConfigReader.h)
add_library(diagnostics_lib STATIC Diagnostics.cpp Diagnostics.h)
add_library(diagnostics_emission_lib STATIC DiagnosticsEmission.cpp DiagnosticsEmission.h)
add_library(geodesic_lib STATIC Geodesic.cpp Geodesic.h)
add_library(input_output_lib STATIC InputOutput.cpp InputOutput.h)
add_library(integrators_lib STATIC Integrators.cpp Integrators.h)
add_library(mesh_lib STATIC Mesh.cpp Mesh.h)
add_library(metric_lib STATIC Metric.cpp Metric.h)
add_library(terminations_lib STATIC Terminations.cpp Terminations.h)
add_library(utilities_lib STATIC Utilities.cpp Utilities.h)
add_library(viewscreen_lib STATIC Viewscreen.cpp Viewscreen.h)

set_target_properties(config_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(config_reader_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(diagnostics_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(diagnostics_emission_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(geodesic_lib PROPERTIES LINKER_LANGUAGE CXX)
# set_target_properties(geometry_lib PROPERTIES LINKER_LANGUAGE CXX)
# set_target_properties(header_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(input_output_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(integrators_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(mesh_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(metric_lib PROPERTIES LINKER_LANGUAGE CXX)
# set_target_properties(spline_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(terminations_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(utilities_lib PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(viewscreen_lib PROPERTIES LINKER_LANGUAGE CXX)

target_link_libraries(foort PRIVATE config_lib)
target_link_libraries(foort PRIVATE config_reader_lib)
target_link_libraries(foort PRIVATE diagnostics_lib)
target_link_libraries(foort PRIVATE diagnostics_emission_lib)
target_link_libraries(foort PRIVATE geodesic_lib)
# target_link_libraries(foort PRIVATE geometry_lib)
# target_link_libraries(foort PRIVATE header_lib)
target_link_libraries(foort PRIVATE input_output_lib)
target_link_libraries(foort PRIVATE integrators_lib)
target_link_libraries(foort PRIVATE mesh_lib)
target_link_libraries(foort PRIVATE metric_lib)
# target_link_libraries(foort PRIVATE spline_lib)
target_link_libraries(foort PRIVATE terminations_lib)
target_link_libraries(foort PRIVATE utilities_lib)
target_link_libraries(foort PRIVATE viewscreen_lib)

find_package(OpenMP REQUIRED)
if(OpenMP_CXX_FOUND)
    target_link_libraries(foort PUBLIC OpenMP::OpenMP_CXX)
endif()

# find_package(MPI REQUIRED)
# target_link_libraries(foort PUBLIC MPI::MPI_CXX)
