add_executable(FOORT Main.cpp Geometry.h)

# ClangFormat(play_simple .)

add_library(config_lib STATIC Config.cpp Config.h Geometry.h)
add_library(config_reader_lib STATIC ConfigReader.cpp ConfigReader.h)
add_library(diagnostics_lib STATIC Diagnostics.cpp Diagnostics.h Geometry.h)
add_library(diagnostics_emission_lib STATIC DiagnosticsEmission.cpp DiagnosticsEmission.h Geometry.h)
add_library(geodesic_lib STATIC Geodesic.cpp Geodesic.h Geometry.h)
add_library(input_output_lib STATIC InputOutput.cpp InputOutput.h Geometry.h)
add_library(integrators_lib STATIC Integrators.cpp Integrators.h Geometry.h)
add_library(mesh_lib STATIC Mesh.cpp Mesh.h Geometry.h)
add_library(metric_lib STATIC Metric.cpp Metric.h Spline.h Geometry.h)
add_library(terminations_lib STATIC Terminations.cpp Terminations.h Geometry.h)
add_library(utilities_lib STATIC Utilities.cpp Utilities.h)
add_library(viewscreen_lib STATIC ViewScreen.cpp ViewScreen.h Geometry.h)

target_link_libraries(FOORT PRIVATE config_lib diagnostics_lib geodesic_lib input_output_lib integrators_lib metric_lib terminations_lib utilities_lib viewscreen_lib)
target_link_libraries(config_lib PUBLIC diagnostics_lib geodesic_lib integrators_lib metric_lib terminations_lib viewscreen_lib config_reader_lib)
target_link_libraries(diagnostics_lib PUBLIC diagnostics_emission_lib geodesic_lib input_output_lib integrators_lib metric_lib)
target_link_libraries(diagnostics_emission_lib PUBLIC input_output_lib integrators_lib metric_lib)
target_link_libraries(geodesic_lib PUBLIC diagnostics_lib input_output_lib integrators_lib metric_lib terminations_lib)
target_link_libraries(integrators_lib PUBLIC geodesic_lib metric_lib)
target_link_libraries(mesh_lib PUBLIC diagnostics_lib input_output_lib utilities_lib)
target_link_libraries(metric_lib PUBLIC input_output_lib integrators_lib)
target_link_libraries(terminations_lib PUBLIC geodesic_lib input_output_lib)
target_link_libraries(utilities_lib PUBLIC diagnostics_lib geodesic_lib integrators_lib metric_lib terminations_lib viewscreen_lib)
target_link_libraries(viewscreen_lib PUBLIC metric_lib mesh_lib)

find_package(OpenMP REQUIRED)
if(OpenMP_CXX_FOUND)
    target_link_libraries(FOORT PUBLIC OpenMP::OpenMP_CXX)
endif()
